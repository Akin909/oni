/**
 * Test scripts for QuickOpen
 */

import * as assert from "assert"
import * as Oni from "oni-api"

import { waitForCommand } from "./Common"

export const test = async (anyOni: any) => {
    const oni: Oni.Plugin.Api = anyOni

    await oni.automation.waitForEditors()

    await testOpenAndClose(oni)
    await testFileSearch(oni)
}

async function testOpenAndClose(oni: Oni.Plugin.Api) {
    await waitForCommand("quickOpen.searchFileByPath", oni)

    oni.commands.executeCommand("quickOpen.show")
    await oni.automation.waitFor(() => oni.menu.isMenuOpen())

    await waitForCommand("menu.close", oni)

    oni.commands.executeCommand("menu.close")
    await oni.automation.waitFor(() => !oni.menu.isMenuOpen())
}

async function testFileSearch(oni: Oni.Plugin.Api) {
    oni.commands.executeCommand("quickOpen.searchFileByPath")
    await oni.automation.waitFor(() => oni.menu.isMenuOpen())

    oni.automation.sendKeys("searchprovider.ts<CR>")
    await oni.automation.waitFor(() =>
        oni.editors.activeEditor.activeBuffer.filePath.endsWith("/SearchProvider.ts"),
    )
}

async function testLineSearch(oni: Oni.Plugin.Api) {
    oni.commands.executeCommand("quickOpen.searchFileByContent")
    await oni.automation.waitFor(() => oni.menu.isMenuOpen())

    oni.commands.executeCommand("quickOpen.searchFileByContent")
    oni.automation.sleep(50)
    oni.automation.sendKeys("^exp.*?class.*?Qu.*?Op.*?Item")
    oni.automation.sleep(500)
    oni.commands.executeCommand("quickOpen.openFileVertical")
    const buffers = oni.editors.activeEditor.getBuffers()
    assert.deepEqual(buffers.length, 2)
    assert.ok(
        buffers[0].filePath.endsWith("QuickOpenItem.ts") ||
            buffers[1].filePath.endsWith("QuickOpenItem.ts"),
    )
}
